"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _Form = _interopRequireDefault(require("./Form"));

var _useField = _interopRequireDefault(require("./useField"));

var _Errors = require("./Errors");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

const propTypes = {
  name: _propTypes.default.string.isRequired,
  schema: _propTypes.default.object,
  errors: _propTypes.default.object,
  context: _propTypes.default.object,
  meta: _propTypes.default.shape({
    errors: _propTypes.default.object.isRequired,
    onError: _propTypes.default.func.isRequired
  })
};

/**
 * A `Form` component that takes a `name` prop. Functions exactly like a normal
 * Form, except that when a `name` is present it will defer errors up to the parent `<Form>`,
 * functioning like a `<Form.Field>`.
 *
 * This is useful for encapsulating complex input groups into self-contained
 * forms without having to worry about `"very.long[1].paths[4].to.fields"` for names.
 */
function NestedForm(_ref) {
  let {
    name,
    schema,
    errors
  } = _ref,
      props = _objectWithoutPropertiesLoose(_ref, ["name", "schema", "errors"]);

  const [_, meta] = (0, _useField.default)({
    name,
    noValidate: true,
    validateOn: null
  });
  return /*#__PURE__*/_react.default.createElement(_Form.default, _extends({
    as: "div"
  }, props, {
    value: meta.value,
    onChange: meta.onChange,
    onError: nextErrors => meta.onError((0, _Errors.prefix)(nextErrors, name)),
    errors: (0, _Errors.unprefix)(name ? meta.errors : errors, name),
    schema: schema || meta.schema,
    context: name ? Object.assign({}, meta.context, props.context) : props.context
  }));
}

NestedForm.propTypes = propTypes;
var _default = NestedForm;
exports.default = _default;