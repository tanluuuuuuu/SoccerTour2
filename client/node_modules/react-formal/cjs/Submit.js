"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _notify = _interopRequireDefault(require("./utils/notify"));

var _useFormSubmit = _interopRequireDefault(require("./useFormSubmit"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 * A Form submit button, for triggering validations for the entire form or specific fields.
 *
 * @memberof Form
 */
function Submit(props) {
  const {
    onClick,
    triggers,
    as: Component = 'button'
  } = props,
        rest = _objectWithoutPropertiesLoose(props, ["onClick", "triggers", "as"]);

  const [submit] = (0, _useFormSubmit.default)({
    triggers
  });
  const handleClick = (0, _react.useCallback)((...args) => {
    (0, _notify.default)(onClick, args);
    submit(args);
  }, [onClick, submit]);
  return /*#__PURE__*/_react.default.createElement(Component, _extends({}, rest, {
    onClick: handleClick,
    type: triggers && triggers.length ? 'button' : 'submit'
  }));
}

Submit.propTypes = {
  /**
   * Specify particular fields to validate in the related form. If empty the entire form will be validated.
   */
  triggers: _propTypes.default.arrayOf(_propTypes.default.string.isRequired),

  /**
   * Control the rendering of the Form Submit component when not using
   * the render prop form of `children`.
   *
   * ```jsx static
   * <Form.Submit as={MyButton}>
   *   Submit
   * </Form.Submit>
   * ```
   */
  as: _propTypes.default.elementType,

  /**
   * A string or array of event names that trigger validation.
   *
   * @default 'onClick'
   */
  onClick: _propTypes.default.func
};
var _default = Submit;
exports.default = _default;